<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo" 
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/data/mongo
        http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- Config -->
     
    <context:annotation-config/>
    <context:component-scan base-package="ly.dollar" />
    
    <!-- TODO - Load property files based on environment  -->
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:twilioSTG.properties</value>
				<value>classpath:mongoSTG.properties</value>
				<value>classpath:jeffersonSTG.properties</value>
			</list>
		</property>
	</bean> 

    <bean id="configSvc" class="ly.dollar.config.ConfigSvcMongoImpl">
        <constructor-arg ref="mongoTemplate" />
    </bean>

	<bean id="smsProcessor" 
		class="ly.dollar.tx.daemon.SmsProcessor"
		init-method="start" destroy-method="stop">
		<constructor-arg ref="smsActor" />
		<constructor-arg ref="smsSvc" />
		<constructor-arg ref="configSvc" />
	</bean> 
	  <!-- Actor -->

	<bean id="smsActor" 
        class="ly.dollar.tx.daemon.SmsActor">
        <constructor-arg ref="iouOrderSvc" />
        <constructor-arg value="${jefferson.smsUserUrl}" />
        <constructor-arg value="${jefferson.fbUserUrl}" />
        <constructor-arg value="${jefferson.twitterListingUrl}" />
        <constructor-arg ref="smsSvc" />
        <constructor-arg ref="userOnboardSvc" />
        <constructor-arg ref="confirmationSvc" />
     </bean>
  
    <bean id="paymentProcessor" 
        class="ly.dollar.tx.daemon.PaymentProcessor"
        init-method="start" destroy-method="stop">
        <constructor-arg ref="iouOrderSvc" />
        <constructor-arg ref="paymentSvc" />
        <constructor-arg ref="confirmationSvc" />
        <constructor-arg ref="configSvc" />
        <constructor-arg value="${jefferson.userUrl}" />
    </bean>
	  <!-- Web -->
	  
	  <bean id="twilioResource" class="ly.dollar.tx.web.TwilioResource">
        <property name="iouOrderSvc" ref="iouOrderSvc"/>
        <property name="confirmationSvc" ref="confirmationSvc"/>
        <property name="phoneConfirmationSvc" ref="phoneConfirmationSvc"/>
        <property name="paymentSvc" ref="paymentSvc"/>
        <property name="userOnboardSvc" ref="userOnboardSvc"/>
    </bean>
    
	<bean id="ledgerService" class="ly.dollar.tx.web.LedgerResource">
        <property name="iouOrderSvc" ref="iouOrderSvc"/>
    </bean>
    
    <bean id="phoneConfirmationResource" class="ly.dollar.tx.web.PhoneConfirmationResource">
          <property name="phoneConfirmationSvc" ref="phoneConfirmationSvc"/>
    </bean>
    
    <bean id="transactionStateResource" class="ly.dollar.tx.web.TransactionStateResource">
        <property name="iouOrderSvc" ref="iouOrderSvc"/>
        <property name="confirmationSvc" ref="confirmationSvc"/>
    </bean>
    
 
	<bean id="inboundSmsResource" class="ly.dollar.tx.web.InboundSmsResource">
		<property name="smsSvc" ref="smsSvc"/>
    </bean>

	<!-- Svc -->
    
     
     <bean id="confirmationSvc" class="ly.dollar.tx.svc.ConfirmationSvc">
		<constructor-arg value="${twilio.accountSid}" />
		<constructor-arg value="${twilio.authToken}" />
		<constructor-arg value="${twilio.fromPhone}" />
		<constructor-arg value="${twilio.statusCallbackUrl}" />
		<constructor-arg ref="confirmationDao" />
		<constructor-arg ref="userMessageDao" />
    </bean>
      <bean id="phoneConfirmationSvc" class="ly.dollar.tx.svc.PhoneConfirmationSvc">
		<constructor-arg value="${twilio.accountSid}" />
		<constructor-arg value="${twilio.authToken}" />
		<constructor-arg value="${twilio.fromPhone}" />
		<constructor-arg value="${twilio.statusCallbackUrl}" />
		<constructor-arg ref="phoneConfirmationDao" />
		<constructor-arg ref="userMessageDao" />
    </bean>
    
    <bean id="paymentSvc" class="ly.dollar.tx.svc.PaymentSvcPaypalImpl">
        <constructor-arg ref="paymentDao" />
     	<constructor-arg ref="transformSvc" />
	</bean>
	<bean id="dwollaPaymentSvc" class="ly.dollar.tx.svc.PaymentSvcDwollaImpl">
        <constructor-arg ref="paymentDao" />
     	<constructor-arg ref="transformSvc" />

    </bean>
    
    <bean id="userOnboardSvc" class="ly.dollar.tx.svc.UserOnboardSvcImpl">
    	<constructor-arg value="${twilio.accountSid}" />
		<constructor-arg value="${twilio.authToken}" />
		<constructor-arg value="${twilio.fromPhone}" />
		<constructor-arg ref="userMessageDao" />
		<property name="iouOrderSvc" ref="iouOrderSvc"/>
    </bean> 
    
    <bean id="iouOrderSvc" class="ly.dollar.tx.svc.IouOrderSvc">
        <constructor-arg ref="iouOrderDao" />
        <constructor-arg ref="userTotalsDao" />
    </bean>
    
    <bean id="transformSvc" class="ly.dollar.tx.svc.TransformSvc">
    </bean>
  
    
    <bean id="smsSvc" class="ly.dollar.tx.svc.SmsSvc">
        <constructor-arg ref="smsDao" />
    </bean>
    
	<!-- Dao -->
 	<bean id="userTotalsDao" class="ly.dollar.tx.dao.UserTotalsDao">
        <constructor-arg ref="mongoTemplate" />
    </bean>
	<bean id="paymentDao" class="ly.dollar.tx.dao.PaymentDaoImpl">
        <constructor-arg ref="mongoTemplate" />
    </bean>
    <bean id="phoneConfirmationDao" class="ly.dollar.tx.dao.PhoneConfirmationDao">
        <constructor-arg ref="mongoTemplate" />
    </bean>
	<bean id="confirmationDao" class="ly.dollar.tx.dao.ConfirmationDao">
        <constructor-arg ref="mongoTemplate" />
    </bean>
     <bean id="userMessageDao" class="ly.dollar.tx.dao.UserMessageDao">
        <constructor-arg ref="mongoTemplate" />
    </bean>
	<bean id="iouOrderDao" class="ly.dollar.tx.dao.IouOrderDao">
        <constructor-arg ref="mongoTemplate" />
    </bean>
    <bean id="smsDao" class="ly.dollar.tx.dao.SmsDao">
        <constructor-arg ref="mongoTemplate" />
    </bean>
    

 	<mongo:db-factory id="mongoDbFactory" dbname="aaron" host="127.2.123.129" port="27017" username="admin" password="gwAGdbVgV5CY"/>
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg ref="mongoDbFactory" />
    </bean>
	    <!-- Daemons -->
    
    <!-- init-method="start" destroy-method="stop" 
    	<bean id="connectionFactoryLocator"
		class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
		<property name="connectionFactories">
			<list>
				<bean class="org.springframework.social.twitter.connect.TwitterConnectionFactory">
					<constructor-arg value="${twitter.consumerKey}" />
					<constructor-arg value="${twitter.consumerSecret}" />
				</bean>
			</list>
		</property>
	</bean>
	<bean id="twitterPoller" 
		class="ly.dollar.tx.daemon.TwitterPoller" 
	 init-method="start" destroy-method="stop" >
		
		<constructor-arg>
			<bean class="org.springframework.social.twitter.api.impl.TwitterTemplate">
				<constructor-arg value="${twitter.consumerKey}" />
				<constructor-arg value="${twitter.consumerSecret}" />
				<constructor-arg value="${twitter.accessToken}" />
				<constructor-arg value="${twitter.accessTokenSecret}" />
			</bean>
		</constructor-arg>
		<constructor-arg value="${twitter.pollIntervalMillis}" />
		<constructor-arg value="${twitter.timelineUrl}" />
		<constructor-arg ref="tweetActor" />
		<constructor-arg ref="configSvc" />
	</bean> 
	       
	<bean id="tweetActor" 
        class="ly.dollar.tx.daemon.TweetActor">
        <constructor-arg ref="iouOrderSvc" />
        <constructor-arg value="${jefferson.twitterUserUrl}" />
        <constructor-arg value="${jefferson.twitterListingUrl}" />
        <constructor-arg ref="userOnboardSvc" />
        <constructor-arg ref="confirmationSvc" />
    </bean> 
	-->

</beans>